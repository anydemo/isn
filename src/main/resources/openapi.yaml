openapi: "3.0.0"
info:
  version: 1.0.0
  title: Swagger isn
  description: awesome social network
  termsOfService: http://swagger.io/terms/
  contact:
    name: gorgestar team
    email: exflyg@gmail.com
    url: http://github.com/gorgestar/isn
  license:
    name: MIT
    url: https://github.com/gorgestar/isn/blob/master/LICENSE
servers:
  - url: http://localhost:8080/api
paths:
  /users:
    get:
      description: |
        Returns all users from the system.
      operationId: findUsers
      parameters:
        - name: tags
          in: query
          description: tags to filter by
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
        - name: limit
          in: query
          description: maximum number of results to return
          required: false
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: user response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Users"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      description: Creates a new user.  Duplicates are not allowed
      operationId: addUser
      requestBody:
        description: User to add to the awesome
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewUsers"
      responses:
        200:
          description: user response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Users"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /users/{id}:
    get:
      description: Returns a user based on a single ID.
      operationId: find pet by id
      parameters:
        - name: id
          in: path
          description: ID of user to fetch
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: user response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Users"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      description: deletes a single user based on the ID supplied
      operationId: deleteUser
      parameters:
        - name: id
          in: path
          description: ID of user to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        204:
          description: user deleted
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

components:
  schemas:
    BaseEntity:
      required:
        - id
        - version
      properties:
        id:
          type: string
        version:
          type: integer
          format: int64
    Error:
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string

    Users:
      allOf:
        - $ref: "#/components/schemas/NewUsers"
        - $ref: "#/components/schemas/BaseEntity"
    NewUsers:
      required:
        - name
      properties:
        name:
          type: string
        tag:
          type: string
    NewPost:
      required:
        - title
      properties:
        title:
            type: string
        auther:
          allOf:
            - $ref: "#/components/schemas/Users"
